---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

const allNotes = await getCollection('notes');
const indexNote = allNotes.find(note => note.slug === 'index');
const otherNotes = allNotes.filter(note => note.slug !== 'index');
const sortedNotes = otherNotes.sort((a, b) => new Date(b.data.date) - new Date(a.data.date));
---

<Layout title="Notes Maze">
  <main class="container mx-auto px-4 py-8 bg-white min-h-screen">
    <div class="mb-8 flex justify-between items-center">
      <button id="searchToggle" class="text-2xl font-bold text-gray-800 flex items-center gap-2 hover:text-blue-600 transition-colors">
        Explore 
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </button>
      <select id="sortSelect" class="p-2 border rounded-lg">
        <option value="newest">Newest to Oldest</option>
        <option value="oldest">Oldest to Newest</option>
      </select>
    </div>

    <div id="searchContainer" class="mb-8 hidden">
      <input
        type="text"
        id="searchInput"
        placeholder="Explore the Notes..."
        class="w-full p-3 rounded-lg bg-gray-100 text-gray-800 placeholder-gray-500 shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
    </div>

    <div id="notesMaze" class="notes-maze">
      {indexNote && (
        <div class="note-item index-note" data-title={indexNote.data.title?.toLowerCase() || ''} data-date={indexNote.data.date || ''}>
          <a href={`/notes/${indexNote.slug}`} class="block bg-gradient-to-br from-orange-400 to-orange-600 p-6 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 h-full transform hover:scale-100">
            <h2 class="text-3xl font-bold text-white mb-3">{indexNote.data.title || 'Index'}</h2>
            {indexNote.data.description &&
              <p class="text-white text-opacity-90">{indexNote.data.description}</p>
            }
          </a>
        </div>
      )}

      {sortedNotes.map((note) => {
        const title = note.data.title || 'Untitled Note';
        return (
          <div class="note-item" data-title={title.toLowerCase()} data-date={note.data.date || ''}>
            <a href={`/notes/${note.slug}`} class="block bg-gray-100 p-5 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 h-full transform hover:scale-105 hover:bg-gray-200">
              <h3 class="text-xl font-semibold text-gray-800 mb-2 transition-colors duration-300">{title}</h3>
              {note.data.description &&
                <p class="text-gray-600 text-sm transition-colors duration-300">{note.data.description}</p>
              }
              {note.data.date &&
                <p class="text-gray-500 text-xs mt-2">{new Date(note.data.date).toLocaleDateString()}</p>
              }
            </a>
          </div>
        );
      })}
    </div>
  </main>
</Layout>

<style>
  .notes-maze {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(calc(50% - 0.75rem), 1fr));
    gap: 1.5rem;
    position: relative;
  }
  .note-item {
    position: relative;
    z-index: 1;
  }
  .index-note {
    grid-column: 1 / -1;
    margin-bottom: 2rem;
  }
  @media (min-width: 768px) {
    .notes-maze {
      grid-template-columns: repeat(auto-fit, minmax(calc(33.333% - 1rem), 1fr));
    }
  }
  @media (min-width: 1024px) {
    .notes-maze {
      grid-template-columns: repeat(auto-fit, minmax(calc(25% - 1.125rem), 1fr));
    }
  }
  #searchContainer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
  }
  #searchContainer.active {
    max-height: 100px;
  }
</style>

<script>
  function setupSearch() {
    const searchInput = document.getElementById('searchInput');
    const noteItems = document.querySelectorAll('.note-item');
    searchInput.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase();

      noteItems.forEach(item => {
        const title = item.getAttribute('data-title') || '';
        if (title.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
  }

  function setupSearchToggle() {
    const searchToggle = document.getElementById('searchToggle');
    const searchContainer = document.getElementById('searchContainer');
    const searchInput = document.getElementById('searchInput');

    searchToggle.addEventListener('click', () => {
      searchContainer.classList.toggle('active');
      searchContainer.classList.toggle('hidden');
      if (searchContainer.classList.contains('active')) {
        setTimeout(() => {
          searchInput.focus();
        }, 300);
      }
    });
  }

  function setupSorting() {
    const sortSelect = document.getElementById('sortSelect');
    const notesMaze = document.getElementById('notesMaze');
    const noteItems = Array.from(document.querySelectorAll('.note-item:not(.index-note)'));
    
    sortSelect.addEventListener('change', () => {
      const sortOrder = sortSelect.value;
      
      noteItems.sort((a, b) => {
        const dateA = new Date(a.getAttribute('data-date'));
        const dateB = new Date(b.getAttribute('data-date'));
        
        if (sortOrder === 'newest') {
          return dateB - dateA;
        } else {
          return dateA - dateB;
        }
      });
      
      noteItems.forEach(item => notesMaze.appendChild(item));
    });
  }

  document.addEventListener('astro:page-load', () => {
    setupSearch();
    setupSearchToggle();
    setupSorting();
  });
</script>