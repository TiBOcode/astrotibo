---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

// Fetch all notes from the 'notes' collection
const allNotes = await getCollection('notes');

// Separate index note from other notes
const indexNote = allNotes.find(note => note.slug === 'index');
const otherNotes = allNotes.filter(note => note.slug !== 'index');

// Shuffle other notes for a more random maze-like appearance
const shuffledNotes = otherNotes.sort(() => Math.random() - 0.5);
---

<Layout title="Notes Maze">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8 text-white">My Notes Maze</h1>
    
    <div class="mb-8">
      <input 
        type="text" 
        id="searchInput" 
        placeholder="Search the Maze..." 
        class="w-full p-2 rounded bg-gray-700 text-white"
      >
    </div>

    <div id="notesMaze" class="notes-maze">
      {indexNote && (
        <div class="note-item index-note" data-title={indexNote.data.title?.toLowerCase() || ''}>
          <a href={`/notes/${indexNote.slug}`} class="block bg-orange-300 p-4 rounded hover:bg-orange-500 transition-colors h-full">
            <h2 class="text-2xl font-semibold text-white mb-2">{indexNote.data.title || 'Index'}</h2>
            {indexNote.data.description && 
              <p class="text-gray-200 mb-2">{indexNote.data.description}</p>
            }
          </a>
        </div>
      )}
      
      {shuffledNotes.map((note, index) => {
        const title = note.data.title || 'Untitled Note';
        return (
          <div class="note-item" data-title={title.toLowerCase()}>
            <a href={`/notes/${note.slug}`} class="block bg-gray-800 p-4 rounded hover:bg-gray-700 transition-colors h-full">
              <h3 class="text-xl font-medium text-white mb-2">{title}</h3>
              {note.data.description && 
                <p class="text-gray-300 mb-2">{note.data.description}</p>
              }
            </a>
          </div>
        );
      })}
    </div>
  </main>
</Layout>

<script>
  function setupSearch() {
    const searchInput = document.getElementById('searchInput');
    const noteItems = document.querySelectorAll('.note-item');

    searchInput.addEventListener('input', () => {
      const searchTerm = searchInput.value.toLowerCase();
      
      noteItems.forEach(item => {
        const title = item.getAttribute('data-title') || '';
        if (title.includes(searchTerm)) {
          item.style.display = '';
        } else {
          item.style.display = 'none';
        }
      });
    });
  }

  document.addEventListener('astro:page-load', setupSearch);
</script>

<style>
  .notes-maze {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1rem;
    position: relative;
  }

  .note-item {
    position: relative;
    z-index: 1;
  }

  .index-note {
    grid-column: 1 / -1;
    margin-bottom: 2rem;
  }

  .note-item::before,
  .note-item::after {
    content: '';
    position: absolute;
    background-color: rgba(255, 255, 255, 0.2);
    z-index: -1;
  }

  .note-item::before {
    top: 50%;
    left: -0.5rem;
    right: -0.5rem;
    height: 2px;
  }

  .note-item::after {
    left: 50%;
    top: -0.5rem;
    bottom: -0.5rem;
    width: 2px;
  }

  .note-item:nth-child(odd)::before {
    left: 50%;
  }

  .note-item:nth-child(even)::before {
    right: 50%;
  }

  @media (min-width: 640px) {
    .notes-maze {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }

  @media (min-width: 1024px) {
    .notes-maze {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
  }
</style>